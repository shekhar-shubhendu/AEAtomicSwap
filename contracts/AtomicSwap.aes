@compiler >= 4

payable contract AtomicSwap =
  datatype swapState = Initiator | Participant

  record swap = {inittimestamp: int, refundTime: int, hashedSecret: bytes(32), secret: bytes(32), initiator: address, participant: address, value: int, emptied: bool, state: swapState}
  
  record state = { swaps: map(bytes(32), swap)}

  datatype event =
      Refunded(int)
    | Redeemed(int)
    | Participated1(address, address, int) // initiator, participator, value
    | Participated2(address, address, bytes(32)) // initiator, participator, hashedSecret
    | Initiated1(address, address, int) // initiator, participator, value
    | Initiated2(address, address, bytes(32)) // initiator, participator, hashedSecret
    | Initiated3(address, address, int) //initiator, participator, refundTime 
  
  stateful entrypoint init() = {swaps = {}}
  
  payable stateful entrypoint initiate(refundTime : int, hashedSecret: bytes(32), participant: address) =
    switch(Map.lookup(hashedSecret, state.swaps))
      None => put(state{swaps[hashedSecret] = create_swap(refundTime, hashedSecret, participant, Call.caller, Initiator)})
      Some(n) => abort("Entry already present")
    Chain.event(Initiated1(state.swaps[hashedSecret].initiator, state.swaps[hashedSecret].participant, state.swaps[hashedSecret].value))
    Chain.event(Initiated2(state.swaps[hashedSecret].initiator, state.swaps[hashedSecret].participant, state.swaps[hashedSecret].hashedSecret))
    Chain.event(Initiated3(state.swaps[hashedSecret].initiator, state.swaps[hashedSecret].participant, state.swaps[hashedSecret].refundTime))

  function create_swap(refundTime : int, hashedSecret: bytes(32), participant: address, initiator: address, creator: swapState) =
    {inittimestamp = Chain.timestamp, refundTime = refundTime, hashedSecret = hashedSecret, secret = Crypto.sha3(0), initiator = initiator, participant = participant, value = Call.value, emptied = false, state = creator}
  
  stateful entrypoint participate(refundTime : int, hashedSecret: bytes(32), initiator: address) =
    switch(Map.lookup(hashedSecret, state.swaps))
      None => put(state{swaps[hashedSecret] = create_swap(refundTime, hashedSecret, Call.caller, initiator,Participant)})
      Some(n) => abort("Entry already present")
    Chain.event(Participated1(state.swaps[hashedSecret].initiator, state.swaps[hashedSecret].participant, state.swaps[hashedSecret].value))
    Chain.event(Participated2(state.swaps[hashedSecret].initiator, state.swaps[hashedSecret].participant, state.swaps[hashedSecret].hashedSecret))
  
  stateful entrypoint redeem(secret: bytes(32), hashedSecret: bytes(32)) =
    let receiver =
      switch(state.swaps[hashedSecret].state)
        Initiator => state.swaps[hashedSecret].participant
        Participant => state.swaps[hashedSecret].initiator
    put(state{swaps[hashedSecret].emptied = true})
    Chain.spend(receiver, state.swaps[hashedSecret].value)
    Chain.event(Redeemed(Chain.timestamp))
  
  stateful entrypoint refund(hashedSecret: bytes(32)) =
    let receiver =
      switch(state.swaps[hashedSecret].state)
        Initiator => state.swaps[hashedSecret].initiator
        Participant => state.swaps[hashedSecret].participant
    put(state{swaps[hashedSecret].emptied = true})
    Chain.spend(receiver, state.swaps[hashedSecret].value)
    Chain.event(Refunded(Chain.timestamp))
  